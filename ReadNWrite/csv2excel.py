#! /hsgs/projects/jhyoon1/pkg64/pythonpackages/anaconda/bin/python
# -*- coding: utf-8 -*-
"""
Functions that helps summarize csv results.
Make sure to point PYTHONPACKAGEPATH variable to the correct python package directory

Created on Thu Jan 30 19:07:21 2014

@author: Edward Cui
"""

csvFileList = ['/hsgs/projects/jhyoon1/midbrain_pilots/mid/analysis/percent_signal_change/SNleft_MEAN.csv',
               '/hsgs/projects/jhyoon1/midbrain_pilots/mid/analysis/percent_signal_change/SNright_MEAN.csv',
               '/hsgs/projects/jhyoon1/midbrain_pilots/mid/analysis/percent_signal_change/STNleft_MEAN.csv',
               '/hsgs/projects/jhyoon1/midbrain_pilots/mid/analysis/percent_signal_change/STNright_MEAN.csv',
               '/hsgs/projects/jhyoon1/midbrain_pilots/mid/analysis/percent_signal_change/RNleft_MEAN.csv',
               '/hsgs/projects/jhyoon1/midbrain_pilots/mid/analysis/percent_signal_change/RNright_MEAN.csv']
ExcelFile = '/hsgs/projects/jhyoon1/midbrain_pilots/mid/analysis/percent_signal_change/summary.xlsx'
RemoveAppendix = 1; # how many appendix to remove: each underscore is one appendix, counting backwards from the file extension

# directory of the python package
PYTHONPACKAGEPATH = '/hsgs/projects/jhyoon1/pkg64/pythonpackages/'

def strfind_vect(s,c):
    """
    Find list of indices of a character in a string
    """
    return [i for i, letter in enumerate(s) if letter == c]
    

def excelsummary(worksheet,SummaryRange,SummaryRowOffset=4):
    """
    Writes mean, standard deviation, and standard error to the bottom of a sheet
    of results, separated by groups of each row
        excelsummary(GroupIndex,SummaryRowOffset)
    Inputs:
            worksheet: worksheet handl generated by xlswriter
            SummaryRange: Data to be used in the summary. E.g., ['A1:F36','A37:F58'], 
                       with each element as a group.
            SummaryRowOffset: counting from the last row of the data, how many more
                       rows to offset to start writing the summary result.
                       Default is 4.
    """
    return worksheet;#return updated worksheet

def excelchart(workbook,worksheet,ChartType,DataRange,ErrorBarRange='',Xlab,Ylab,Title):
    """
    Create a chart for excel sheet
        excelchart(ExcelFile,SheetName,ChartType,DataRange,ErrorBarRange)
    Inputs:
            worksheet: worksheet handle generated by xlsxwriter
            ChartType: type of chart. Supports: 'bar' and 'line'
            DataRange: range of data to use. With the format
                       [[S1_header,S1_value,G1],[S2_header,S2_value,G2]], where S1 and S2
                       are different series/groups of data, and G1/G2 are group names
                       E.g., DataRange =[['A1:A8','B1:B8','C'],['A11:A18','B11:B18','SZ']].
                       S1 and S2 must have the same length.
            ErrorBarRange: Range of error bars to be applied onto the graph.
                       Specify as [E1,E2], whereas E1 and E2 are error bar range
                       for each series
    """
    # Create a new chart on current sheet
    chart = workbook.add_chart({'type':ChartType});
    # Configure each chart's data series
    for v in range(0,len(DataRange)):
        if ErrorBarRange:
            chart.add_series({'values':worksheet.name+'!'+DataRange[v][2],
                          'categories':worksheet.name+'!'+DataRange[v][1],
                          'name':DataRange[v][3],
                          'y_error_bars':{
                          'type':'custom',
                          'plus_values':worksheet.name+'!'+ErrorBarRange[v],
                          'minus_values':worksheet.name+'!'+ErrorBarRange[v],
                          'end_style':1,
                          'direction':'both'}});
        else:
            chart.add_series({'values':worksheet.name+'!'+DataRange[v][2],
                          'categories':worksheet.name+'!'+DataRange[v][1],
                          'name':DataRange[v][3]});
    # set chart aesthetics              
    chart.set_title({'name':worksheet.name+' '+Title});
    chart.set_legend({'position':'right'});
    chart.set_size({'width':720,'height':576});
    chart.set_x_axis({'name':Xlab});
    chart.set_y_axis({'name':Ylab,
                      'major_gridlines':{'visible':False}});
    # Insert the chart
    worksheet = worksheet.insert_chart('A'+str(worksheet.dim_rowmax+2),chart);
     
    return worksheet;#return updated worksheet
    

def csv2excel(ExcelFile,csvFileList,SummaryRange='',ChartType='',
              RemoveAppendix=0,SummaryRowOffset=4,ErrorBarRange=''):
    """
    A function that writes each .csv file to an Excel spreadsheet
        csv2excel(csvFileList, ExcelFile,RemoveAppendix=0)
    Inputs:      
            ExcelFile: output Excel spreadsheet to be created
            csvFileList: list of full paths of csv files
            SummaryRange: Data to be used in the summary. E.g., 
                        ['A1:F36','A37:F58'], 
                        with each element as a group.
            ChartType: type of chart. Supports: 'bar'and'line'
            RemoveAppendix (optional): how many appendix to remove and to be use 
                            as sheet names? Each underscore is one appendix. 
                            Counting backwards starting from the file extension. 
                            Default is 0.
            SummaryRowOffset(optional): counting from the last row of the data, 
                        how many more
                        rows to offset to start writing the summary result.
                        Default is 4.
            ErrorBarRange(optional): Range of error bars to be applied onto 
                        the graph. Specify in similar fashion as DataRange.
    """
    # Set necessary paths
    import sys; import os; import xlsxwriter; import csv;
    global PYTHONPACKAGEPATH;
    sys.path.append(PYTHONPACKAGEPATH);
    # Open an Excel spreadsheet to writ the imported csv files
    workbook = xlsxwriter.Workbook(ExcelFile);
    # Transverse through all the .csv files
    for n in csvFileList:
        (_,SHEETNAME) = os.path.split(n);#get file name
        SHEETNAME = SHEETNAME.replace('.csv','_');#remove .csv file extension  
        if RemoveAppendix>0:
            IND =[x-len(SHEETNAME) for x in strfind_vect(SHEETNAME,'_')];# get index
            SHEETNAME = SHEETNAME[:(IND[RemoveAppendix-1])];
            IND = None;#remove variables
        worksheet = None;#clear variables
        worksheet = workbook.add_worksheet(SHEETNAME);# add a new worksheet
        SHEETNAME = None;# remove variables
        r = 1;
        with open(n,'rb') as csvfile:
            sheet = csv.reader(csvfile,delimiter=',');
            for row in sheet:
                worksheet.write_row('A'+str(r),row);#write each row
                r = r+1;#row index        
        csvfile.close();#close the .csv file
        row = None; # remove some variables
        # add a summary if specified
        if SummaryRange:
            worksheet = excelsummary(worksheet,SummaryRange,SummaryRowOffset)
        # add a chart if specified
        if ChartType:
            #parse data range for chart insertion
            DataRange = '';
            worksheet = excelchart(workbook,ChartType,DataRange,ErrorBarRange)
            
    workbook.close();#close workbook
    
    

    

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    